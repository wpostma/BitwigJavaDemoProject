package com.warrenpostma;

import com.bitwig.extension.api.util.midi.ShortMidiMessage;
import com.bitwig.extension.callback.ShortMidiMessageReceivedCallback;
import com.bitwig.extension.controller.api.*;
import com.bitwig.extension.controller.ControllerExtension;
import com.bitwig.extension.api.util.midi.SysexBuilder;


import com.warrenpostma.util.ConsoleLogger;

import java.io.Console;

/* generated by bitwig, extended by Warren Postma, intended as a starter project.
 *    A starter extension code template.
 *    More stuff included than is included in the bitwig generator.
 */
public class BitwigStarterExtension extends ControllerExtension
{

   // protected constants
   private final int                 mRemoteControlPageSize = 8;
   private final int                 SEQ_BUFFER_STEPS = 256;


   // protected fields
   protected MidiOut                      mMidiOut;
   protected CursorRemoteControlsPage     mRemoteControlsPage;
   protected boolean                      mPreferenceBoolExample;
   private CursorTrack                    mCursorTrack;
   private UserControlBank                mUserControlBank;
   private Transport                      mTransport;
   private CursorDevice                   mCursorDevice;
   private RemoteControlsPage             mCursorDeviceRemoteControls;

   private NoteInput                      mNoteInput;
   Clip                                   mCursorClip;
   private int                            mTaskCounter; // scheduled task repeats N times.



   protected BitwigStarterExtension(final BitwigStarterExtensionDefinition definition, final ControllerHost host)
   {
      super(definition, host);

      ConsoleLogger.init(host);
   }

   public void showPopupNotification( final String msg)
   {
      final ControllerHost host = getHost();
      host.showPopupNotification(msg);
      //System.out.printf("%s\n",msg);
      final String msgFormat = String.format("showPopupNotification: %s",msg);
      ConsoleLogger.log(msgFormat);


   }

   // remote control callback code sample.
   void RemoteControlPageValueChangeHandler(int slider, int value)
   {
//      final byte[] message = SysexBuilder.fromHex("F0 00 21 10 78 3D").addByte(20 + slider)
//              .addByte(Math.max(11, value)).terminate();
//
//      mMidiOut.sendSysex(message);
   }

   //mCursorClip = host.createLauncherCursorClip(SEQ_BUFFER_STEPS, 128);
   //   cursorClip.addStepDataObserver(() -> NotifyCursorClipStepDataStepExists() );
   protected void NotifyCursorClipStepDataStepExists(int x, int y, int state)
   {
      // TODO.
   }




   @Override
   public void init()
   {
      final ControllerHost host = getHost();      

      mTransport = host.createTransport();
      final MidiIn midiIn = host.getMidiInPort(0);

      midiIn.setMidiCallback((ShortMidiMessageReceivedCallback)msg -> onMidi0(msg));
      midiIn.setSysexCallback((String data) -> onSysex0(data));

      mNoteInput = midiIn.createNoteInput(
               "",
              "8?????", "9?????", "B?40??", "B?4A??", "D?????",
              "E?????");
      mNoteInput.setShouldConsumeEvents(false);

      //noteInput.setUseExpressiveMidi(true, 0, 48);  // roli and such
      //noteInput.setShouldConsumeEvents(true);
      //noteInput.sendRawMidiEvent(...);
      //noteInput.setVelocityTranslationTable();
      //noteInput.includeInAllInputs();

      mMidiOut = host.getMidiOutPort(0);

      //mMidiOut.sendMidi(i,i1,i2);

      /*
      final String[] bendRanges = { "12", "24", "36", "48", "60", "72", "84", "96" };
      final SettableEnumValue bendRange = host.getPreferences().getEnumSetting("Bend Range", "MIDI",
              bendRanges, "48");
      bendRange.addValueObserver(new EnumValueChangedCallback()
      {
         @Override
         public void valueChanged(final String newValue)
         {
            final int pb = Integer.parseInt(newValue);
            noteInput.setUseExpressiveMidi(true, 0, pb);
            sendPitchBendRangeRPN(1, pb);
         }
      });*/



      mCursorTrack = host.createCursorTrack(/*sends*/3, /*scenes*/8);


      // Map CC 20 - 27 to device parameters
      mTransport = host.createTransport(); // private Transport mTransport;


      mCursorDevice = mCursorTrack.createCursorDevice();
      mCursorDeviceRemoteControls  = mCursorDevice.createCursorRemoteControlsPage(8);


      final PinnableCursorDevice device = mCursorTrack.createCursorDevice("DeviceSelection", "Instrument", 0,
              CursorDeviceFollowMode.FIRST_INSTRUMENT_OR_DEVICE);

      mRemoteControlsPage = device.createCursorRemoteControlsPage(mRemoteControlPageSize);
      //mPre XyPage = device.createCursorRemoteControlsPage("xy", 2, "xy");

      // device.name().addValueObserver(name -> mIsSpecialDeviceSelected = name.toLowerCase().startsWith("deviceX"));

      for (int p = 0; p < mRemoteControlPageSize; p++)
      {
         final int pf = p;
         mRemoteControlsPage.getParameter(p).markInterested();
         mRemoteControlsPage.getParameter(p).setIndication(true);
         mRemoteControlsPage.getParameter(p).value().addValueObserver(128,
                 value -> RemoteControlPageValueChangeHandler(pf, value));
      }

//      for (int p = 0; p < 2; p++)
//      {
//         mXyPage.getParameter(p).setIndication(true);
//      }

      mCursorClip = host.createLauncherCursorClip( /*width*/ SEQ_BUFFER_STEPS, /*height*/ 128);

      mCursorClip.addStepDataObserver((int x, int y, int state) -> NotifyCursorClipStepDataStepExists(x,y,state) );
      //mCursorClip.addPlayingStepObserver( (int data) -> NotifyCursorClipStepPlay(data) );//deprecated
      // use mCursorClip.playingStep()
      mCursorClip.scrollToKey(0);


      // TODO: Perform your driver initialization here.
      // NOTE: many things have to be marked as interested before they can be used
      // NOTE:many different api objects must be created during this init and cannot be created later.
      // NOTE: The API DOCUMENTATION is trash.  Just consult the API source code.
      //    Sample reference JAVA controller code
      //    https://github.com/bitwig/bitwig-extensions/tree/api-16/src/main/java/com/bitwig/extensions/controllers
      //
      //    Sample opinionated framework for working on top of the api
      //    https://github.com/teotigraphix/Framework4Bitwig/tree/master/daw
      //



      // For now just show a popup notification for verification that it is running.
      showPopupNotification("bitwigstarter Initialized");


      // uncomment this and this plugin will keep repeatedly playing a midi note.
      //host.scheduleTask( () -> scheduledTaskStartNote() , 100);
   }

   // test code to see if there is a weird behaviour in startNote
   // expectation: plays only one midi note.
   // Actual behaviour in bitwig 4.2 - plays several notes.

   public void scheduledTaskStopNote()
   {
      ConsoleLogger.log("stop note");

      final ControllerHost host = getHost();
      mCursorTrack.stopNote(60,0);

      mTaskCounter++;
      if (mTaskCounter<99) {
         host.scheduleTask(() -> scheduledTaskStartNote(), 1000);
      }
   }
   public void scheduledTaskStartNote()
   {
      ConsoleLogger.log("start note");

      final ControllerHost host = getHost();
      mCursorTrack.startNote(60,100);
      host.scheduleTask( () -> scheduledTaskStopNote() , 1000);
   }

   @Override
   public void exit()
   {
      // TODO: Perform any cleanup once the driver exits
      // For now just show a popup notification for verification that it is no longer running.
      getHost().showPopupNotification("bitwigstarter Exited");
   }

   @Override
   public void flush()
   {
      // TODO Send any updates you need here.


   }

   /** Called when we receive short MIDI message on port 0. */
   private void onMidi0(ShortMidiMessage msg) 
   {
      final String msgLog = String.format("midi: channel=%d   data1=%d, data2=%d ",msg.getChannel(), msg.getData1(), msg.getData2() );
      ConsoleLogger.log(msgLog);

      // TODO: Implement your MIDI input handling code here.
   }

   /** Called when we receive sysex MIDI message on port 0. */
   private void onSysex0(final String data) 
   {
      final String msgLog = String.format("SYSEX %s ",data );
      ConsoleLogger.log(msgLog);


      // MMC Transport Controls:
      if (data.equals("f07f7f0605f7"))
            mTransport.rewind();
      else if (data.equals("f07f7f0604f7"))
            mTransport.fastForward();
      else if (data.equals("f07f7f0601f7"))
            mTransport.stop();
      else if (data.equals("f07f7f0602f7"))
            mTransport.play();
      else if (data.equals("f07f7f0606f7"))
            mTransport.record();
   }


}
